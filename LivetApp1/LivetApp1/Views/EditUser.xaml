<Window x:Class="LivetApp1.Views.EditUser"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:LivetApp1.Views"
        xmlns:vm="clr-namespace:LivetApp1.ViewModels"
        Title="ユーザー追加・編集画面" Height="362" Width="537.569" ResizeMode="NoResize"  WindowStartupLocation="CenterScreen">

    <Window.DataContext>
        <vm:EditUserViewModel/>
    </Window.DataContext>

    <i:Interaction.Triggers>
        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction/>
        </l:InteractionMessageTrigger>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>


        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction/>
        </l:InteractionMessageTrigger>
        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->



    </i:Interaction.Triggers>

    <Canvas>
        <Label Content="ユーザーCD" HorizontalAlignment="Left" Margin="28,22,0,0" VerticalAlignment="Top"/>
        <Label Content="ユーザー名(ID)" HorizontalAlignment="Left" Margin="13,53,0,0" VerticalAlignment="Top"/>
        <Label Content="パスワード" HorizontalAlignment="Left" Margin="35,83,0,0" VerticalAlignment="Top"/>
        <Label Content="氏名" HorizontalAlignment="Left" Margin="55,107,0,0" VerticalAlignment="Top"/>
        <Label Content="ふりがな" HorizontalAlignment="Left" Margin="41,135,0,0" VerticalAlignment="Top"/>
        <Label Content="管理者フラグ" HorizontalAlignment="Left" Margin="12,162,0,0" VerticalAlignment="Top" Grid.RowSpan="2"/>
        <TextBox HorizontalAlignment="Left" Height="23" Margin="89,22,0,0" TextWrapping="Wrap" Text="{Binding User.CD}" VerticalAlignment="Top" Width="120"/>
        <TextBox HorizontalAlignment="Left" Height="23" Margin="89,53,0,0" TextWrapping="Wrap" Text="{Binding User.UserName}" VerticalAlignment="Top" Width="120"/>
        <TextBox HorizontalAlignment="Left" Height="23" Margin="89,83,0,0" TextWrapping="Wrap" Text="{Binding User.Password}" VerticalAlignment="Top" Width="120"/>
        <TextBox HorizontalAlignment="Left" Height="23" Margin="89,111,0,0" TextWrapping="Wrap" Text="{Binding User.Name}" VerticalAlignment="Top" Width="120"/>
        <TextBox HorizontalAlignment="Left" Height="23" Margin="89,139,0,0" TextWrapping="Wrap" Text="{Binding User.Hurigana}" VerticalAlignment="Top" Width="120"/>
        <CheckBox IsChecked="{Binding User.IsAdmin}" Content="" HorizontalAlignment="Left" Margin="89,168,0,0" VerticalAlignment="Top" />
        <Label Content="所属部署" HorizontalAlignment="Left" Margin="26,205,0,0" VerticalAlignment="Top" RenderTransformOrigin="0.603,2"/>
        <Label Content="{Binding User.Department.DepartmentName}" HorizontalAlignment="Left" Margin="116,205,0,0" VerticalAlignment="Top"/>
        <Label Content= "{Binding User.Department.SectionName}" HorizontalAlignment="Left" Margin="116,236,0,0" VerticalAlignment="Top" RenderTransformOrigin="0.603,2"/>


        <DataGrid Width="300" Height="200" ItemsSource="{Binding Departments}" AutoGenerateColumns="False" CanUserAddRows="False" Canvas.Left="222" Canvas.Top="22">

            <DataGrid.Columns>

                <DataGridTextColumn Header="CD" Binding="{Binding CD}" />
                <DataGridTextColumn Header="部" Binding="{Binding DepartmentName}" />
                <DataGridTextColumn Header="課" Binding="{Binding SectionName}" />
                <DataGridTemplateColumn Header="">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <!-- CommandParameter に {Binding} とだけ記述すると、UserMstViewModel.Users の要素、つまり User モデルを指定したことになる。-->
                            <Button  VerticalAlignment="Center" Content="選択" Command="{Binding DataContext.SelectDepartmentCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}" CommandParameter="{Binding}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
        <Button Content="変更・追加" HorizontalAlignment="Left" Width="101" Command="{Binding SendCommand}" Canvas.Left="389" Canvas.Top="271" />
        <Button Content="閉じる" HorizontalAlignment="Left" VerticalAlignment="Top" Width="75" Command="{Binding CloseCommand}" Canvas.Left="65" Canvas.Top="271"/>

        <Canvas.Background>
            <ImageBrush ImageSource="../Resources/_6529-19.jpg"/>
        </Canvas.Background>
    </Canvas>
</Window>
