<Window x:Class="LivetApp1.Views.CardsViewForAdmin"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:LivetApp1.Views"
        xmlns:vm="clr-namespace:LivetApp1.ViewModels"
        Title="CardsViewForAdmin" Height="350" Width="858.5">

    <Window.DataContext>
        <vm:CardsViewForAdminViewModel/>
    </Window.DataContext>

    <i:Interaction.Triggers>

        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="MessageViewForAdmin" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction/>
        </l:InteractionMessageTrigger>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Grid>
        <DataGrid ItemsSource="{Binding AdminCards}" AutoGenerateColumns="False" CanUserAddRows="False" Margin="0,0,0,39">
            <DataGrid.Columns>
                <DataGridTextColumn Header="名前" Binding="{Binding To.Name}" />
                <!-- <DataGridTextColumn Header="From" Binding="{Binding From.Name}" /> -->
                <!-- <DataGridTextColumn Header="カードID" Binding="{Binding Id}" /> -->
                <DataGridTextColumn Header="タイトル" Binding="{Binding Title}"  />
                <DataGridTextColumn Width="400" Header="本文" Binding="{Binding Body}"  />
                <DataGridTextColumn Header="感謝度" Binding="{Binding ThanksCount}"  />
                <DataGridTemplateColumn Header="管理者確認済">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <!-- CommandParameter に {Binding} とだけ記述すると、UserMstViewModel.Users の要素、つまり User モデルを指定したことになる。-->
                            <CheckBox IsChecked="{Binding IsReadedAdmin}" IsEnabled="False"></CheckBox>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <DataGridTemplateColumn Header="">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <!-- CommandParameter に {Binding} とだけ記述すると、UserMstViewModel.Users の要素、つまり User モデルを指定したことになる。-->
                            <!--ここに選択ボタンが押されたらcommandで
                            　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　MessageViewに遷移するようにする？-->
                            <Button Content="選択" Command="{Binding DataContext.MessageViewForAdminCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}" CommandParameter="{Binding}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn/>
            </DataGrid.Columns>
        </DataGrid>
        <Button Content="閉じる"  Margin="375,289,375,0" VerticalAlignment="Top" Command="{Binding CloseCommand}"/>


        <Grid.Background>
            <ImageBrush ImageSource="../Resources/11happa_green_honbun.jpg"/>
        </Grid.Background>

    </Grid>
</Window>
