<Window x:Class="LivetApp1.Views.CreateCard"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:LivetApp1.Views"
        xmlns:vm="clr-namespace:LivetApp1.ViewModels"
        Title="カード作成画面" Height="380" Width="745" ResizeMode="NoResize " Icon="../Resources/mm.jpg">

    <Window.DataContext>
        <vm:CreateCardViewModel/>
    </Window.DataContext>

    
    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->
        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="Authorized" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction/>
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <Canvas>
        
        <TextBox Height="20" TextWrapping="Wrap" Text="{Binding ThanksCard.Title}"  Width="167" Margin="86,42,486,289"/>
        <TextBox AcceptsReturn="True" Height="140" Width="275" TextWrapping="Wrap" Text="{Binding ThanksCard.Body}" Canvas.Left="52" Canvas.Top="109"/>
        <Label Content="本文"  Height="24" Margin="52,80,631,247"   Width="55" />
        <Label Content="感謝カード作成"  Height="27"   Width="255" Background="Aqua" Canvas.Left="52" Canvas.Top="10"/>
        <Button Content="閉じる"  Width="55" Margin="650,306,33,22" Click="Button_Click" Command="{Binding CloseCommand}"/>
        <Button Content="送信"  Width="55" Margin="568,307,115,22" Command="{Binding SendCommand}" />
        <Label Content="{Binding ThanksCard.From.Name}" Margin="76,270,486,0"  Height="24"/>
        <Label Content="タイトル"  Height="24" Margin="32,38,658,289"   Width="49" />
        <Label Content="From/"  Margin="37,270,647,50" />
       

        <DataGrid ItemsSource="{Binding Users}" AutoGenerateColumns="False" CanUserAddRows="False" Margin="386,62,0,79"
            Height="200" SelectionChanged="DataGrid_SelectionChanged" HorizontalAlignment="Left" Width="301" IsReadOnly="True" >
            <DataGrid.Columns>
                

                <DataGridTextColumn Header="氏名" Binding="{Binding Name}" />
                <DataGridTextColumn Header="部署" Binding="{Binding Department.DepartmentName}" />
                <DataGridTextColumn Header="課" Binding="{Binding Department.SectionName}"/>

                <DataGridTemplateColumn Header="">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Button Content="選択" Command="{Binding DataContext.SelectCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}" CommandParameter="{Binding}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
        <Label Content="感謝カードを送る人を選択してください" Canvas.Left="386" Canvas.Top="42"/>

        <Canvas.Background>
            <ImageBrush ImageSource="../Resources/11happa_green_honbun.jpg"/>
        </Canvas.Background>

    </Canvas>

</Window>
