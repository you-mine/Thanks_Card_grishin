<Window x:Class="LivetApp1.Views.Content"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:LivetApp1.Views"
        xmlns:vm="clr-namespace:LivetApp1.ViewModels"
        Title="カード作成（簡易）編集" Height="412" Width="537" ResizeMode="NoResize" WindowStartupLocation="CenterScreen">


    <Window.DataContext>
        <vm:ContentViewModel/>
    </Window.DataContext>
    <i:Interaction.Triggers>
        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>
        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>
        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->


        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="AddContent" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction/>
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>
    <Grid Margin="0,0,4,5">
        <TabControl HorizontalAlignment="Left" Height="268" Margin="47,36,0,0" VerticalAlignment="Top" Width="430">
            <TabItem Header="場所">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="GotFocus" >
                        <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="ChangeToPlace"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Grid Background="#FFE5E5E5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="5*"/>
                        <ColumnDefinition Width="200*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="7*"/>
                    </Grid.ColumnDefinitions>
                    <DataGrid FontSize="15" ItemsSource="{Binding placeContent}" AutoGenerateColumns="False" CanUserAddRows="False" Margin="0,10,10,21" Grid.ColumnSpan="3" Grid.Column="1">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="CD" Binding="{Binding CD}" />
                            <DataGridTextColumn Header="場所" Binding="{Binding content}" />
                            <DataGridTemplateColumn Header="">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <!-- CommandParameter に {Binding} とだけ記述すると、UserMstViewModel.Users の要素、つまり User モデルを指定したことになる。-->
                                        <Button  VerticalAlignment="Center" Content="編集"  Command="{Binding DataContext.PutCommand, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" CommandParameter="{Binding}"  />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>

                            <DataGridTemplateColumn Header="">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <!-- CommandParameter に {Binding} とだけ記述すると、UserMstViewModel.Users の要素、つまり User モデルを指定したことになる。-->
                                        <Button VerticalAlignment="Center" Content="削除" Command="{Binding DataContext.DeleteCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}" CommandParameter="{Binding}" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
            <TabItem Header="感謝事項1"  Margin="1.333,0,4,-0.666">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="GotFocus" >
                        <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="ChangeToThanks1"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Grid Background="#FFE5E5E5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <DataGrid FontSize="15" ItemsSource="{Binding help1Content}" AutoGenerateColumns="False" CanUserAddRows="False" Margin="10,10,10,21">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="CD" Binding="{Binding CD}" />
                            <DataGridTextColumn Header="内容1" Binding="{Binding content}" />
                            <DataGridTemplateColumn Header="">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <!-- CommandParameter に {Binding} とだけ記述すると、UserMstViewModel.Users の要素、つまり User モデルを指定したことになる。-->
                                        <Button VerticalAlignment="Center" Content="編集" Command="{Binding DataContext.PutCommand, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" CommandParameter="{Binding}" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <!-- CommandParameter に {Binding} とだけ記述すると、UserMstViewModel.Users の要素、つまり User モデルを指定したことになる。-->
                                        <Button VerticalAlignment="Center" Content="削除" Command="{Binding DataContext.DeleteCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}" CommandParameter="{Binding}" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>

            <TabItem Header="感謝事項2" HorizontalAlignment="Left" Width="137" Margin="-2,0,0,0">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="GotFocus" >
                        <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="ChangeToThanks2"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Grid Background="#FFE5E5E5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <DataGrid FontSize="15" ItemsSource="{Binding help2Content}" AutoGenerateColumns="False" CanUserAddRows="False" Margin="10,10,10,21">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="CD" Binding="{Binding CD}" />
                            <DataGridTextColumn Header="内容2" Binding="{Binding content}" />

                            <DataGridTemplateColumn Header="">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <!-- CommandParameter に {Binding} とだけ記述すると、UserMstViewModel.Users の要素、つまり User モデルを指定したことになる。-->
                                        <Button  VerticalAlignment="Center" Content="編集" Command="{Binding DataContext.PutCommand, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" CommandParameter="{Binding}" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>

                            <DataGridTemplateColumn Header="">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <!-- CommandParameter に {Binding} とだけ記述すると、UserMstViewModel.Users の要素、つまり User モデルを指定したことになる。-->
                                        <Button VerticalAlignment="Center" Content="削除" Command="{Binding DataContext.DeleteCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}" CommandParameter="{Binding}" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
        </TabControl>
        <Label Content="カード作成（簡易）編集&#xD;&#xA;" HorizontalAlignment="Left" Margin="47,10,0,0" VerticalAlignment="Top" Height="26"/>
        <Button Content="閉じる" HorizontalAlignment="Left" Margin="432,323.5,0,0" VerticalAlignment="Top" Width="75" Command="{Binding CloseCommand}" Click="Button_Click" RenderTransformOrigin="0.533,0.344"/>
        <Button Content="追加" HorizontalAlignment="Left" Margin="402,23,0,0" VerticalAlignment="Top" Width="75" Command="{Binding AddContentCommand}"/>
        <Grid.Background>
            <ImageBrush ImageSource="../Resources/11happa_green_honbun.jpg"/>
        </Grid.Background>
    </Grid>
</Window>